using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonRpc
{  
    internal class Request
    {
        [JsonPropertyName("jsonrpc")]
        public string JsonRpc { get; set; }
        
        [JsonPropertyName("method")]
        public string Method { get; set; }

        [JsonPropertyName("params")]
        public object Params { get; set; }

        [JsonPropertyName("id")]
        public int Id { get; set; }
    } 

    internal class Response
    {
        [JsonPropertyName("jsonrpc")]
        public string JsonRpc { get; set; }

        [JsonPropertyName("result")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public object Result { get; set; }

        [JsonPropertyName("error")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Error Error { get; set; }
        
        [JsonPropertyName("id")]
        public int Id { get; set; }
    }

    internal class Error
    {
        [JsonPropertyName("code")]
        public int Code { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonPropertyName("data")]
        public object Data { get; set; }
    }

    {{range .Services}}
    {{$service := .Name}}
    {{range .Methods}}
    public record {{$service}}{{.Name}}Params
    {
        {{range $field, $type := .Params}}
        public {{$type}} {{$field}} { get; set; }
        {{end}}
    }

    public record {{$service}}{{.Name}}Result
    {
        {{range $field, $type := .Result}}
        public {{$type}} {{$field}} { get; set; }
        {{end}}
    }
    {{end}}
    
    public interface I{{$service}}
    {
        {{range .Methods}}
        {{$service}}{{.Name}}Result {{.Name}}({{$service}}{{.Name}}Params arith{{.Name}}Params);
        {{end}}
    }
    {{end}}
    
    public class Server
    {
        public const int ErrorParsing = -32700;
        public const int ErrorInvalidRequest = -32600;
        public const int ErrorMethodNotFound = -32601;
        public const int ErrorInvalidParams = -32602;
        public const int ErrorInternal = -32603;

        {{range .Services}}
        public I{{.Name}} {{.Name}};
        {{end}}
        
        public void HandleHttpListenerContext(HttpListenerContext context)
        {
            StreamReader reader = new StreamReader(context.Request.InputStream);
            Request request = JsonSerializer.Deserialize<Request>(reader.ReadToEnd());
            reader.Close();

            string rpcparams = ((JsonElement)request.Params).GetRawText();
            object rpcresult = null;

            switch (context.Request.RawUrl)
            {
                {{range .Services}}
                {{$service := .Name}}
                case "{{.Endpoint}}":
                    switch (request.Method)
                    {
                        {{range .Methods}}
                        case "{{.Name}}":
                            rpcresult = this.{{$service}}.{{.Name}}(JsonSerializer.Deserialize<{{$service}}{{.Name}}Params>(rpcparams));
                            break;
                        {{end}}
                        default:
                            break;
                    }
                    break;
                {{end}}
                default:
                    break;
            }

            Response response = new Response{
                JsonRpc = "2.0",
                Result = rpcresult,
                Id = request.Id,
            };

            context.Response.StatusCode = (int)HttpStatusCode.OK;

            StreamWriter writer = new StreamWriter(context.Response.OutputStream);
            writer.WriteLine(JsonSerializer.Serialize(response));
            writer.Close();
        }
    }

    public class Client
    {
        {{range .Services}}
        public I{{.Name}} {{.Name}};
        {{end}}

        public Client(HttpClient httpClient, string endpoint)
        {
            {{range .Services}}
            this.{{.Name}} = new {{.Name}}Client(endpoint+"{{.Endpoint}}");
            {{end}}
        }

        internal static R DoRequest<P, R>(string endpoint, string method,  P reqParams)
        {
            Request rpcRequest = new Request
            {
                JsonRpc = "2.0",
                Method = method,
                Params = reqParams,
                Id = 1,
            };

            string json = JsonSerializer.Serialize<Request>(rpcRequest);
            byte[] byteArray = Encoding.UTF8.GetBytes(json);

            WebRequest request = WebRequest.Create(endpoint);
            request.Method = "POST";
            request.ContentType = "application/json";
            request.ContentLength = byteArray.Length;

            Stream reqStream = request.GetRequestStream();
            reqStream.Write(byteArray, 0, byteArray.Length);

            WebResponse response = request.GetResponse();
            Stream respStream = response.GetResponseStream();
            
            StreamReader reader = new StreamReader(respStream);
            Response rpcResponse = JsonSerializer.Deserialize<Response>(reader.ReadToEnd());

            string result = ((JsonElement)rpcResponse.Result).GetRawText();

            return JsonSerializer.Deserialize<R>(result);
        }
    }

    {{range .Services}}
    {{$service := .Name}}
    internal class {{$service}}Client : I{{$service}}
    {
        private string endpoint;

        public {{$service}}Client(string endpoint)
        {
            this.endpoint = endpoint;
        }

        {{range .Methods}}
        public {{$service}}{{.Name}}Result {{.Name}}({{$service}}{{.Name}}Params reqParams)
        {
            return Client.DoRequest<{{$service}}{{.Name}}Params, {{$service}}{{.Name}}Result>(this.endpoint, "{{.Name}}", reqParams);
        }
        {{end}}
    }
    {{end}}
}