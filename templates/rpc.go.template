// Code generated by jsonrpcgen. DO NOT EDIT.

package {{.Namespace.Go}}

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
)

type jsonRPCRequest struct {
	JSONRPC string          `json:"jsonrpc"`
	Method  string          `json:"method"`
	Params  json.RawMessage `json:"params"`
	ID      int             `json:"id"`
}

type jsonRPCResponse struct {
	JSONRPC string          `json:"jsonrpc"`
	Result  json.RawMessage `json:"result,omitempty"`
	Error   *jsonRPCError   `json:"error,omitempty"`
	ID      int             `json:"id"`
}

type jsonRPCError struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

type Client struct {
	httpClient *http.Client
	endpoint string

	{{range .Services}}
	{{.Name}} {{.Name}}
	{{end}}
}

func NewClient(httpClient *http.Client, endpoint string) *Client {
	c := Client{
		httpClient: httpClient,
		endpoint: endpoint,
	}

	{{range .Services}}
	c.{{.Name}} = &internal{{.Name}}Client{client: &c, endpoint: "{{.Endpoint}}"}
	{{end}}

	return &c
}

{{range .Services}}
type internal{{.Name}}Client struct {
	client *Client
	endpoint string
}

{{$service := .Name}}
{{range .Methods}}
func (c *internal{{$service}}Client) {{.Name}}(params *{{$service}}{{.Name}}Params) (*{{$service}}{{.Name}}Result, error) {
	data, err := json.Marshal(params)
	if err != nil {
		return nil, fmt.Errorf("error marshalling {{$service}}{{.Name}}Params: %v", err)
	}

	req := jsonRPCRequest{
		JSONRPC: "2.0",
		Method:  "{{.Name}}",
		Params:  data,
	}

	rpcreq := bytes.NewBuffer(nil)
	err = json.NewEncoder(rpcreq).Encode(req)
	if err != nil {
		return nil, fmt.Errorf("error encoding {{$service}} {{.Name}} RPC request: %v", err)
	}

	res, err := c.client.httpClient.Post(c.client.endpoint+c.endpoint, "application/json", rpcreq)
	if err != nil {
		return nil, fmt.Errorf("error POSTing {{$service}} {{.Name}} RPC request: %v", err)
	}

	var rpcres *jsonRPCResponse
	err = json.NewDecoder(res.Body).Decode(&rpcres)
	if err != nil {
		return nil, fmt.Errorf("error decoding {{$service}}.{{.Name}} RPC response: %v", err)
	}

	var result *{{$service}}{{.Name}}Result
	err = json.Unmarshal(rpcres.Result, &result)
	if err != nil {
		return nil, fmt.Errorf("error unmarshalling {{$service}}{{.Name}}Result: %v", err)
	}

	return result, nil
}
{{end}}
{{end}}

type Server struct {
    {{range .Services}}
    {{.Name}} {{.Name}}
    {{end}}
}

func (s *Server) Mux() *http.ServeMux {
	mux := http.NewServeMux()
	{{range .Services}}
	mux.HandleFunc("{{.Endpoint}}", s.{{.Name}}Handler)
	{{end}}
	return mux
}

{{range .Services}}
{{$service := .Name}}
func (s *Server) {{.Name}}Handler(w http.ResponseWriter, r *http.Request) {
	var request jsonRPCRequest

	err := json.NewDecoder(r.Body).Decode(&request)
	if err != nil {
		log.Fatal(err)
	}

	response := jsonRPCResponse{
		JSONRPC: request.JSONRPC,
		ID:      request.ID,
	}

	var resultData json.RawMessage


	switch request.Method {
	{{range .Methods}}
	case "{{.Name}}":
		var params {{$service}}{{.Name}}Params
		err = json.Unmarshal(request.Params, &params)
		if err != nil {
			response.Error = &jsonRPCError{Message: err.Error()}
		}

		result, err := s.{{$service}}.{{.Name}}(&params)
		if err != nil {
			response.Error = &jsonRPCError{Message: err.Error()}
		}

		resultData, err = json.Marshal(result)
		if err != nil {
			response.Error = &jsonRPCError{Message: err.Error()}
		}
	{{end}}
	default:
		response.Error = &jsonRPCError{Code: -32601, Message: "Method not found"}
	}

	response.Result = resultData

	err = json.NewEncoder(w).Encode(response)
	if err != nil {
		log.Fatal(err)
	}
}
{{end}}

{{range .Services}}
{{$service := .Name}}
{{range .Methods}}
// {{$service}}{{.Name}}Params...
type {{$service}}{{.Name}}Params struct {
    {{range $field, $type := .Params}}
    {{$field}} {{$type}} `json:"{{$field}}"`
    {{end}}
}

// {{$service}}{{.Name}}Result...
type {{$service}}{{.Name}}Result struct {
    {{range $field, $type := .Result}}
    {{$field}} {{$type}} `json:"{{$field}}"`
    {{end}}
}
{{end}}

// {{.Name}} {{.Description}}
type {{.Name}} interface {
    {{range .Methods}}
    {{.Name}}(*{{$service}}{{.Name}}Params) (*{{$service}}{{.Name}}Result, error)
    {{end}}
}
{{end}}